@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Name</th>
			<th>Category</th>
			<th>Price</th>
		</tr>
	</thead>
	<tbody>
		@if (ProductData.Count() > 0){
			@foreach (Product product in ProductData){
				<tr>
					<td>@product.ProductId</td>
					<td>@product.Name</td>
					<td>@product.Category</td>
					<td>@product.Price.ToString("c", new System.Globalization.CultureInfo("en-US"))</td>
					<td>
						<NavLink class="btn btn-info btn-sm"
								href="@GetDetailsUrl(product.ProductId)">
							Details
						</NavLink>
						<NavLink class="btn btn-warning btn-sm"
								href="@GetEditUrl(product.ProductId)">
							Edit
						</NavLink>
						<button class="btn btn-danger btn-sm"
								@onclick="@(e => DeleteProduct(product))">
								Delete
						</button>
					</td>
				</tr>
			}
		}
		else{
			<tr>
				<td colspan="5" class="text-center">No Products</td>
			</tr>
		}
	</tbody>
</table>

<NavLink class="btn btn-primary" href="/admin/products/create">Create</NavLink>

@code{
	public IStoreRepository repository => Service;

	public IEnumerable<Product> ProductData { get; set; } = Enumerable.Empty<Product>();

	protected async override Task OnInitializedAsync()
	{
		await UpdateData();
	}

	public async Task UpdateData()
	{
		ProductData = await repository.Products.ToListAsync();
	}

	public async Task DeleteProduct(Product product)
	{
		repository.DeleteProduct(product);
		await UpdateData();
	}

	public string GetDetailsUrl(int id) => $"/admin/products/details/{id}";
	public string GetEditUrl(int id) => $"/admin/products/edit/{id}";
}